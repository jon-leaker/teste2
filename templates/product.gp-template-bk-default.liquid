<!-- /templates/product.liquid -->
{% comment %}

Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
and allow search engines to easily understand what the content is.

For more information on these Scheme.org tags, visit:
- http://schema.org/docs/gs.html

{% endcomment %}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
  Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

  {% include 'breadcrumb' %}

  <div class="grid product-single">
    <div class="grid__item large--one-half text-center">

      <!-- fancy start -->
      <section id="fancy">
        {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
        <div class="xzoom-container">
          <img class="xzoom4" id="xzoom-fancy" src="{{ featured_image | img_url: 'large' }}" xoriginal="{{ featured_image | img_url: 'original' }}" />
          <div class="xzoom-thumbs">
            {% if product.images.size > 1 %}
            {% for image in product.images %}
            <a href="{{ image.src | img_url: 'original' }}"><img class="xzoom-gallery4" width="80" src="{{ image.src | img_url: 'large' }}" title="The description goes here"></a>
            {% endfor %}
            {% endif %}
          </div>
        </div>
      </section>
      <!-- fancy end -->




    </div>

    <div class="grid__item large--one-half">

      <h1 itemprop="name">{{ product.title }}</h1>

      <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        <meta itemprop="priceCurrency" content="{{ shop.currency }}">

        <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

        {% comment %}
        ID addToCartForm is a selector for the ajax cart plugin
        {% endcomment %}
        <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm" class="form-vertical">

          {% comment %}
          Add product variants as a dropdown.
          - By default, each variant (or combination of variants) will display as its own <option>
          - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

          You can leverage jQuery to add a callback on page load and each time the select element changes:
          - Include option_selection.js (as seen at the bottom of this file)
          - This allows you to use JavaScript anytime the variant dropdown changes
          - This also separates out your variant options (ie. size, color, etc.) to separate select elements

          For more information on products with multiple options, visit:
          - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
          {% endcomment %}
          <select name="id" id="productSelect" class="product-single__variants">
            {% for variant in product.variants %}
            {% if variant.available %}

            {% comment %}
            Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
            {% endcomment %}
            <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

            {% else %}
            <option disabled="disabled">
              {{ variant.title }} - {{ 'products.product.sold_out' | t }}
            </option>
            {% endif %}
            {% endfor %}
          </select>

          <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
          <span id="ProductPrice" class="h2" itemprop="price" content="{{ current_variant.price | divided_by: 100.00 }}">
            {{ current_variant.price | money }}
          </span>

          {% if product.compare_at_price_max > product.price %}
          <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
          <p id="ComparePrice">
            {{ 'products.product.compare_at' | t }} {{ current_variant.compare_at_price | money }}
          </p>
          {% endif %}

          <label for="Quantity" class="quantity-selector">{{ 'products.product.quantity' | t }}</label>
          <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">

          <button type="submit" name="add" id="AddToCart" class="btn">
            <span id="AddToCartText">{{ 'products.product.add_to_cart' | t }}</span>
          </button>
        </form>

      </div>

      <div class="product-description rte" itemprop="description">
        {{ product.description }}

        {% comment %}
        {% include 'products.custom_fields' %}

        {{metafields.mykey.value}}
        {% assign mykey = product.metafields.mykey %}
        {% assign key = '' %}
        <ul>
        <li>Dry: {{ mykey[key] }}</li>
        <li>Dry: {{ mykey['Dry'] }}</li>
        <li>Dry: {{ mykey.mykey }}</li>
      </ul>

      {% endcomment %}




    </div>

    {% comment %}
    If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
    in the URL, we can show next/previous links to other products in the collection.
    {% endcomment %}
    {% if collection %}
    {% if collection.previous_product or collection.next_product %}
    <p>
      {% if collection.previous_product %}
      <span class="left">
        {{ 'products.general.previous_product_html' | t | link_to: collection.previous_product }}
      </span>
      {% endif %}
      {% if collection.next_product %}
      <span class="right">
        {{ 'products.general.next_product_html' | t | link_to: collection.next_product }}
      </span>
      {% endif %}
    </p>
    {% endif %}
    {% endif %}

  </div>
</div>

</div>

{% comment %}
To take advantage of a callback on the select dropdown, add option_selection.js
and customize the JS in timber.productPage as needed.

Currently, timber.productPage does the following:
- Hides your <select> tag from above
- Breaks out the product variants into separate product options, if more than one exists
- Generates a <select> tag for each product option
- Enables/disables elements based on variant availability

Callback notes:
- Keep the callback available to the global scope (window.selectCallback) so that advanced
addons can override it.
* E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
var selectCallback = function(variant, selector) {
  timber.productPage({
    money_format: "{{ shop.money_format }}",
    variant: variant,
    selector: selector
  });
};

jQuery(function($) {
  new Shopify.OptionSelectors('productSelect', {
    product: {{ product | json }},
    onVariantSelected: selectCallback,
    enableHistoryState: true
  });

  // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
  {% if product.options.size == 1 and product.options.first != 'Title' %}
  $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
  {% endif %}

  // Hide selectors if we only have 1 variant and its title contains 'Default'.
  {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
  $('.selector-wrapper').hide();
  {% endif %}
});

(function ($) {
  $(document).ready(function() {
    $('.xzoom, .xzoom-gallery').xzoom({zoomWidth: 400, title: true, tint: '#333', Xoffset: 15});
    $('.xzoom2, .xzoom-gallery2').xzoom({position: '#xzoom2-id', tint: '#ffa200'});
    $('.xzoom3, .xzoom-gallery3').xzoom({position: 'lens', lensShape: 'circle', sourceClass: 'xzoom-hidden'});
    $('.xzoom4, .xzoom-gallery4').xzoom({tint: '#be926f', Xoffset: 15});
    $('.xzoom5, .xzoom-gallery5').xzoom({tint: '#be926f', Xoffset: 15});

    //Integration with hammer.js
    var isTouchSupported = 'ontouchstart' in window;

    if (isTouchSupported) {
      //If touch device
      $('.xzoom, .xzoom2, .xzoom3, .xzoom4, .xzoom5').each(function(){
        var xzoom = $(this).data('xzoom');
        xzoom.eventunbind();
      });

      $('.xzoom, .xzoom2, .xzoom3').each(function() {
        var xzoom = $(this).data('xzoom');
        $(this).hammer().on("tap", function(event) {
          event.pageX = event.gesture.center.pageX;
          event.pageY = event.gesture.center.pageY;
          var s = 1, ls;

          xzoom.eventmove = function(element) {
            element.hammer().on('drag', function(event) {
              event.pageX = event.gesture.center.pageX;
              event.pageY = event.gesture.center.pageY;
              xzoom.movezoom(event);
              event.gesture.preventDefault();
            });
          }

          xzoom.eventleave = function(element) {
            element.hammer().on('tap', function(event) {
              xzoom.closezoom();
            });
          }
          xzoom.openzoom(event);
        });
      });

      $('.xzoom4').each(function() {
        var xzoom = $(this).data('xzoom');
        $(this).hammer().on("tap", function(event) {
          event.pageX = event.gesture.center.pageX;
          event.pageY = event.gesture.center.pageY;
          var s = 1, ls;

          xzoom.eventmove = function(element) {
            element.hammer().on('drag', function(event) {
              event.pageX = event.gesture.center.pageX;
              event.pageY = event.gesture.center.pageY;
              xzoom.movezoom(event);
              event.gesture.preventDefault();
            });
          }

          var counter = 0;
          xzoom.eventclick = function(element) {
            element.hammer().on('tap', function() {
              counter++;
              if (counter == 1) setTimeout(openfancy,300);
              event.gesture.preventDefault();
            });
          }

          function openfancy() {
            if (counter == 2) {
              xzoom.closezoom();
              $.fancybox.open(xzoom.gallery().cgallery);
            } else {
              xzoom.closezoom();
            }
            counter = 0;
          }
          xzoom.openzoom(event);
        });
      });

      $('.xzoom5').each(function() {
        var xzoom = $(this).data('xzoom');
        $(this).hammer().on("tap", function(event) {
          event.pageX = event.gesture.center.pageX;
          event.pageY = event.gesture.center.pageY;
          var s = 1, ls;

          xzoom.eventmove = function(element) {
            element.hammer().on('drag', function(event) {
              event.pageX = event.gesture.center.pageX;
              event.pageY = event.gesture.center.pageY;
              xzoom.movezoom(event);
              event.gesture.preventDefault();
            });
          }

          var counter = 0;
          xzoom.eventclick = function(element) {
            element.hammer().on('tap', function() {
              counter++;
              if (counter == 1) setTimeout(openmagnific,300);
              event.gesture.preventDefault();
            });
          }

          function openmagnific() {
            if (counter == 2) {
              xzoom.closezoom();
              var gallery = xzoom.gallery().cgallery;
              var i, images = new Array();
              for (i in gallery) {
                images[i] = {src: gallery[i]};
              }
              $.magnificPopup.open({items: images, type:'image', gallery: {enabled: true}});
            } else {
              xzoom.closezoom();
            }
            counter = 0;
          }
          xzoom.openzoom(event);
        });
      });

    } else {
      //If not touch device

      //Integration with fancybox plugin
      $('#xzoom-fancy').bind('click', function(event) {
        var xzoom = $(this).data('xzoom');
        xzoom.closezoom();
        $.fancybox.open(xzoom.gallery().cgallery, {padding: 0, helpers: {overlay: {locked: false}}});
        event.preventDefault();
      });

      //Integration with magnific popup plugin
      $('#xzoom-magnific').bind('click', function(event) {
        var xzoom = $(this).data('xzoom');
        xzoom.closezoom();
        var gallery = xzoom.gallery().cgallery;
        var i, images = new Array();
        for (i in gallery) {
          images[i] = {src: gallery[i]};
        }
        $.magnificPopup.open({items: images, type:'image', gallery: {enabled: true}});
        event.preventDefault();
      });
    }
  });
})(jQuery);

</script>
